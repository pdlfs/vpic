#!/usr/bin/env bash
#------------------------------------------------------------------------------#
# This script supports building VPIC on Los Alamos National Laboratory (LANL)
# clusters based on the current set of loaded modules.  Select the compiler,
# MPI, processor type, etc. by using "module load" and then run this script
# to generate an appropriate set of cmake cache variables that can be loaded
# with the "-C" flag of cmake.
#
# Normal users should not need to change this script if they are building VPIC
# and are happy with the current loaded set of modules and the defaults
# in this script.
#------------------------------------------------------------------------------#
# XXXXCDC: TODO - fix handling of compiler opt flags (build type)
#               - review interaction between cache and external cmake runs
#               - get cmake to do more of the work?

#------------------------------------------------------------------------------#
# Get the path to the project from which this script was called.
#------------------------------------------------------------------------------#

src_dir="${0%/*}/.."
. ${src_dir}/arch/cmake-fns.sh      # load helper functions

#------------------------------------------------------------------------------#
# Configure the type of build that we want to perform.
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
# select the compiler (VCOM) and MPI (VMPI) using module-fns.sh.
# module-fns.sh uses the current loaded set of modules.
#------------------------------------------------------------------------------#
. ${src_dir}/arch/module-fns.sh

#------------------------------------------------------------------------------#
# Choose a thread model.
#------------------------------------------------------------------------------#
# One of the two available thread models must be chosen. Valid options are the
# following.
#
# PTH: Pthreads
# OMP: OpenMP
#------------------------------------------------------------------------------#

VTHR="PTH"
#VTHR="OMP"

#------------------------------------------------------------------------------#
# Choose type of vector intrinsics support.
#------------------------------------------------------------------------------#
# Note the following constraints.
#
# Each of the nine variables in this section must have a configured value.
# This is because the corresponding "USE" cmake variable is set on the cmake
# command line below to allow any possible combinations to be configured using
# a single cmake command.
#
# If all values are configured as OFF, the scalar implementations of VPIC
# functions which are not vectorized will be used.
#
# It is possible to have a vector version configured as ON for each of the
# three vector widths i.e. V4, V8 and V16. In that scenario, if a given VPIC
# function has a V16 implementation, that will be used. If there is not a V16
# implementation but there is a V8 implementation, that will be used. If there
# is not a V16 or V8 implementation but there is a V4 implementation, that
# will be used. Finally, for functions that have no vector implementations,
# the scalar version will be used.
#
# Currently, it is recommended to always configure the appropriate V4 version
# as on if using vector versions because there are key functions that only
# have a V4 version because the current algorithm does not generalize to
# longer vector lengths. An example is the move_p function. Since the V4
# versions are generally more performant than the scalar versions, it makes
# sense to use them even when using the longer vector length implementations
# for other VPIC functions.
#
# In summary, when using vector versions on a machine with 256 bit SIMD, the
# V4 and V8 implementations should be configured as ON. When using a machine
# with 512 bit SIMD, V4 and V16 implementations should be configured as ON.
#
# First, we turn all of the vector options OFF. Then, we turn on the ones we
# want.
#------------------------------------------------------------------------------#

SET_V4_PORTABLE="OFF"
SET_V4_SSE="OFF"
SET_V4_AVX="OFF"
SET_V4_AVX2="OFF"
SET_V8_PORTABLE="OFF"
SET_V8_AVX="OFF"
SET_V8_AVX2="OFF"
SET_V16_PORTABLE="OFF"
SET_V16_AVX512="OFF"

if [ x$VCPU = xhaswell ]; then
    SET_V4_AVX2="ON"
    SET_V8_AVX2="ON"
elif [ x$VCPU = xknl ]; then
    SET_V4_AVX2="ON"
    SET_V16_AVX512="ON"
elif [ x$VCPU = xbroadwell ]; then
    SET_V4_AVX2="ON"
    SET_V8_AVX2="ON"
else
    echo "WARNING: unknown VCPU $VCPU - using scalar vector default."
fi

#------------------------------------------------------------------------------#
# Choose format of status update output.
#------------------------------------------------------------------------------#
# One of the two available options must be chosen. Valid options are ON and
# OFF.
#
# If SET_MORE_DIGITS=OFF, the output has two significant figures.
#
# If SET_MORE_DIGITS=ON, the output has four significant figures.
#------------------------------------------------------------------------------#

SET_MORE_DIGITS="OFF"
#SET_MORE_DIGITS="ON"

#------------------------------------------------------------------------------#
# Choose a particle sort implementation.
#------------------------------------------------------------------------------#
# One of the two available options must be chosen. Valid options are the
# following.
#
# LSORT: legacy, thread serial sort
# TSORT: thread parallel sort
#
# The LSORT particle sort implementation is the thread serial particle sort
# implementation from the legacy v407 version of VPIC. This implementation
# supports both in-place and out-of-place sorting of the particles. It is very
# competitive with the thread parallel sort implementation for a small number
# of threads per MPI rank, i.e. 4 or less, especially on KNL because sorting
# the particles in-place allows the fraction of particles stored in High
# Bandwidth Memory (HBM) to remain stored in HBM. Also, the memory footprint
# of VPIC is reduced by the memory of a particle array which can be significant
# for particle dominated problems.
#
# The TSORT particle sort implementation is a thread parallel implementation.
# Currently, it can only perform out-of-place sorting of the particles. It will
# be more performant than the LSORT implementation when using many threads per
# MPI rank but uses more memory because of the out-of-place sort.
#------------------------------------------------------------------------------#

VSORT="LSORT"
#VSORT="TSORT"

#------------------------------------------------------------------------------#
# Choose type of library to build.
#------------------------------------------------------------------------------#
# One of the two available options must be chosen. Valid options are ON or OFF.
#
# The default is to build a static library, i.e. OFF.
#------------------------------------------------------------------------------#

SET_SHARED_LIBS="OFF"
#SET_SHARED_LIBS="ON"

#------------------------------------------------------------------------------#
# Choose integrated test support.
#------------------------------------------------------------------------------#
# One of the two available options must be chosen. Valid options are ON or OFF.
#
# The default is not to build the integrated tests, i.e. OFF.
#------------------------------------------------------------------------------#

SET_INTEGRATED_TESTS="OFF"
#SET_INTEGRATED_TESTS="ON"

#------------------------------------------------------------------------------#
# Choose unit test support.
#------------------------------------------------------------------------------#
# One of the two available options must be chosen. Valid options are ON or OFF.
#
# The default is not to build the unit tests, i.e. OFF.
#------------------------------------------------------------------------------#

SET_UNIT_TESTS="OFF"
#SET_UNIT_TESTS="ON"

#------------------------------------------------------------------------------#
# Choose OpenSSL support for checksums.
#------------------------------------------------------------------------------#
# One of the two available options must be chosen. Valid options are ON and
# OFF.
#
# If SET_ENABLE_OPENSSL=OFF, use of checksums is turned off.
#
# If SET_ENABLE_OPENSSL=ON, use of checksums is turned on.
#------------------------------------------------------------------------------#

SET_ENABLE_OPENSSL="OFF"
#SET_ENABLE_OPENSSL="ON"

#------------------------------------------------------------------------------#
# Choose support for dynamic resizing of particle arrays.
#------------------------------------------------------------------------------#
# One of the two available options must be chosen. Valid options are ON and
# OFF.
#
# If SET_DISABLE_DYNAMIC_RESIZING=OFF, particle arrays will be resized
# dynamically.
#
# If SET_DISABLE_DYNAMIC_RESIZING=ON, particle arrays will not be resized
# dynamically and the user will be responsible for ensuring that particle
# arrays have enough space to handle the evolution of a non-uniform particle
# distribution.
#------------------------------------------------------------------------------#

SET_DISABLE_DYNAMIC_RESIZING="OFF"
#SET_DISABLE_DYNAMIC_RESIZING="ON"

#------------------------------------------------------------------------------#
# Choose the minimum number of particles to dynamically allocate space for.
#------------------------------------------------------------------------------#
# A value must be chosen.  The default is 128 particles which allocates space
# equal to a 4 KByte page size.
#------------------------------------------------------------------------------#

SET_PARTICLE_MIN_NUM="128"
#SET_PARTICLE_MIN_NUM="32768"

#------------------------------------------------------------------------------#
# Choose the CMake build type.
#------------------------------------------------------------------------------#
# One of the available options must be chosen. Valid options depend on build
# types available in the CMake version but include at least the following.
#
# Release: In general, the default for CMake.
# None: Tells CMake not to use any pre-defined build type and gives VPIC build
#       system total control of CMake variables defined on cmake command line.
#------------------------------------------------------------------------------#

SET_BUILD_TYPE="Release"
#SET_BUILD_TYPE="None"

#------------------------------------------------------------------------------#
# Unless the user wants to modify options to the compiler, no changes should
# be needed below this point.
#
# If the user desires to configure compiler options, proceed to the section
# below for the chosen compiler.
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
# Configure default compiler names to use
#------------------------------------------------------------------------------#

if [ x$craype = x1 ]; then             # let cray wrappers select compiler
    VPIC_COMPILER_C="cc"
    VPIC_COMPILER_CXX="CC"
elif [ x$VMPI = xIMPI -a x$VCOM = xINT ]; then
    #
    # XXX: on gr-fe IPMI mpicc is a wrapper script that defaults to gcc.
    # it also has mpigcc and mpiicc that direct to GNU and INT, respectively.
    # if you want INT with IMPI you have to direct compiles IMPI to icc using
    # one of:
    #   - '-cc=icc' to the mpicc wrapper script
    #   - environment variables, the mpicc script does this:
    #     compiler_name=${I_MPI_CC:-${MPICH_CC:-${default_compiler_name:?}}}
    #   - just set the compiler directly to mpiicc  (this is what we do)
    #
    # on the crays, the cray wrapper takes care of this for us.
    #
    # XXX: in theory, cmake should be able to figure out what to do without
    #      having to set VPIC_COMPILER_{C,CXX} based on the mpi in the path.
    #      note: VPIC_COMPILER_{C,CXX} sets CMAKE_{C,CXX}_COMPILER
    #
    # XXX: but still need the C=cc CXX=CC on lanl cray, as the PrgEnv-intel
    #      sets $CC to point directly to the intel compiler instead of
    #      at the cray wrapper (why?)
    #
    VPIC_COMPILER_C="mpiicc"
    VPIC_COMPILER_CXX="mpiicpc"
else
    VPIC_COMPILER_C="mpicc"
    VPIC_COMPILER_CXX="mpicxx"
fi

#------------------------------------------------------------------------------#
# Configure options for the Intel compilers.
#------------------------------------------------------------------------------#

if [ "$VCOM" = "INT" ]
then
    #--------------------------------------------------------------------------#
    # Use "-g" to provide debug symbols in the executable.  In general, use of
    # "-g" with modern compilers does not degrade performance and provides
    # information required by many tools such as debugging and performance
    # analysis tools.
    #
    # Use of "-O3" provides fairly aggressive optimization. When using vector
    # intrinsics versions, most of the optimization is explicit in the
    # intrinsics implementations. Reasonable alternatives to "-O3" could be
    # "-O2" or "-Ofast". These alternatives should be benchmarked sometime.
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER="-g -O3"

    #--------------------------------------------------------------------------#
    # Use of "-inline-forceinline" overrides default heuristics of compiler
    # and forces inlining of functions marked with inline keyword if compiler
    # is able to inline. For VPIC, this option has mainly been used when using
    # a portable implementation to force inlining by compiler and also when
    # use of "-Winline" option identifies functions not being inlined that are
    # marked with inline keyword.
    #
    # Use of "-qoverride-limits" cause certain internal compiler limits to be
    # ignored that are used to limit memory usage and excessive compile times
    # by the compiler.
    #
    # Use of "-vec-threshold0" ignores compiler heuristics and causes loops
    # which can be vectorized to always be vectorized, regardless of the
    # amount of computational work in the loop.
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER+=" -inline-forceinline"
    #FLAGS_CXX_COMPILER+=" -vec-threshold0"
    FLAGS_CXX_COMPILER+=" -qoverride-limits"

    #--------------------------------------------------------------------------#
    # Use of "-no-ansi-alias" informs compiler that VPIC does not obey ANSI
    # aliasing rules which can reduce available optimizations.
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER+=" -no-ansi-alias"

    #--------------------------------------------------------------------------#
    # Use of "-Winline" cause compiler to emit a warning when a function that
    # is declared inline is not inlined. Inlining is very important to VPIC
    # performance and it is useful to know if compiler has not inlined a
    # function that was assumed to be inlined.
    #
    # Use of "-craype-verbose" causes Cray compiler wrapper script to print
    # command it is forwarding to actual compiler for invocation. This is very
    # useful for producing a build log to make sure compiler is being invoked
    # with expected options.
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER+=" -Winline"
    if [ x$craype = x1 ]; then
        FLAGS_CXX_COMPILER+=" -craype-verbose"
    fi

    #--------------------------------------------------------------------------#
    # Use of "-qopt-report=5" specifies level of detail in compiler reports.
    # This is the maximum level of detail.
    #
    # Use of "-qopt-report-phase=all" causes all phases of compilation process
    # to provide output for compiler reports. Compiler reports are useful for
    # understanding how compiler is optimizing various parts of VPIC.
    #
    # Use of "-diag-disable 10397" disables printing of diagnostic message
    # that compiler reports are being generated.
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER+=" -qopt-report=5"
    FLAGS_CXX_COMPILER+=" -qopt-report-phase=all"
    FLAGS_CXX_COMPILER+=" -diag-disable 10397"

    #--------------------------------------------------------------------------#
    # Use of "-Wl,--export-dynamic" removes following type of VPIC warnings.
    #
    # Unable to find a safely writable symbol that corresponds to address
    # 432af0 (the closest match was "(null)" from "./lpi_2d_F6_test.Linux").
    # Writing out the raw address instead and keeping my fingers crossed.
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER+=" -Wl,--export-dynamic"

    #--------------------------------------------------------------------------#
    # Use of "-dynamic" causes Cray compiler wrapper to direct compiler driver
    # to link dynamic libraries at runtime instead of static libraries. The
    # default on Cray systems is to link static libraries. It is important for
    # many tools, especially performance analysis tools, to have an executable
    # that has been linked dynamically to system libraries and MPI libraries.
    #--------------------------------------------------------------------------#

    if [ x$craype = x1 ]; then
        FLAGS_CXX_COMPILER+=" -dynamic"
    fi

    #--------------------------------------------------------------------------#
    # Use of "-qopt-zmm-usage=high" causes the compiler to generate zmm code,
    # i.e. AVX-512 code, without any restrictions. Extensive use of AVX-512
    # code causes the CPU core to down clock or throttle to avoid overheating.
    # The default is for the compiler to use some internal limits on how much
    # AVX-512 instructions are used. This is relevant on ATS-1 systems only
    # for KNL processors.
    #--------------------------------------------------------------------------#

    if [ x$VCPU = xknl ]; then
        FLAGS_CXX_COMPILER+=" -qopt-zmm-usage=high"
    fi

    #--------------------------------------------------------------------------#
    # Use "-g" to provide debug symbols in the executable.  In general, use of
    # "-g" with modern compilers does not degrade performance and provides
    # information required by many tools such as debugging and performance
    # analysis tools.
    #
    # Use of "-O3" provides fairly aggressive optimization. When using vector
    # intrinsics versions, most of the optimization is explicit in the
    # intrinsics implementations. Reasonable alternatives to "-O3" could be
    # "-O2" or "-Ofast". These alternatives should be benchmarked sometime.
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER="-g -O3"

    #--------------------------------------------------------------------------#
    # Use of "-inline-forceinline" overrides default heuristics of compiler
    # and forces inlining of functions marked with inline keyword if compiler
    # is able to inline. For VPIC, this option has mainly been used when using
    # a portable implementation to force inlining by compiler and also when
    # use of "-Winline" option identifies functions not being inlined that are
    # marked with inline keyword.
    #
    # Use of "-qoverride-limits" cause certain internal compiler limits to be
    # ignored that are used to limit memory usage and excessive compile times
    # by the compiler.
    #
    # Use of "-vec-threshold0" ignores compiler heuristics and causes loops
    # which can be vectorized to always be vectorized, regardless of the
    # amount of computational work in the loop.
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER+=" -inline-forceinline"
    #FLAGS_C_COMPILER+=" -vec-threshold0"
    FLAGS_C_COMPILER+=" -qoverride-limits"

    #--------------------------------------------------------------------------#
    # Use of "-no-ansi-alias" informs compiler that VPIC does not obey ANSI
    # aliasing rules which can reduce available optimizations.
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER+=" -no-ansi-alias"

    #--------------------------------------------------------------------------#
    # Use of "-Winline" cause compiler to emit a warning when a function that
    # is declared inline is not inlined. Inlining is very important to VPIC
    # performance and it is useful to know if compiler has not inlined a
    # function that was assumed to be inlined.
    #
    # Use of "-craype-verbose" causes Cray compiler wrapper script to print
    # command it is forwarding to actual compiler for invocation. This is very
    # useful for producing a build log to make sure compiler is being invoked
    # with expected options.
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER+=" -Winline"
    if [ x$craype = x1 ]; then
        FLAGS_C_COMPILER+=" -craype-verbose"
    fi

    #--------------------------------------------------------------------------#
    # Use of "-qopt-report=5" specifies level of detail in compiler reports.
    # This is the maximum level of detail.
    #
    # Use of "-qopt-report-phase=all" causes all phases of compilation process
    # to provide output for compiler reports. Compiler reports are useful for
    # understanding how compiler is optimizing various parts of VPIC.
    #
    # Use of "-diag-disable 10397" disables printing of diagnostic message
    # that compiler reports are being generated.
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER+=" -qopt-report=5"
    FLAGS_C_COMPILER+=" -qopt-report-phase=all"
    FLAGS_C_COMPILER+=" -diag-disable 10397"

    #--------------------------------------------------------------------------#
    # Use of "-Wl,--export-dynamic" removes following type of VPIC warnings.
    #
    # Unable to find a safely writable symbol that corresponds to address
    # 432af0 (the closest match was "(null)" from "./lpi_2d_F6_test.Linux").
    # Writing out the raw address instead and keeping my fingers crossed.
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER+=" -Wl,--export-dynamic"

    #--------------------------------------------------------------------------#
    # Use of "-dynamic" causes Cray compiler wrapper to direct compiler driver
    # to link dynamic libraries at runtime instead of static libraries. The
    # default on Cray systems is to link static libraries. It is important for
    # many tools, especially performance analysis tools, to have an executable
    # that has been linked dynamically to system libraries and MPI libraries.
    #--------------------------------------------------------------------------#

    if [ x$craype = x1 ]; then
        FLAGS_C_COMPILER+=" -dynamic"
    fi

    #--------------------------------------------------------------------------#
    # Use of "-qopt-zmm-usage=high" causes the compiler to generate zmm code,
    # i.e. AVX-512 code, without any restrictions. Extensive use of AVX-512
    # code causes the CPU core to down clock or throttle to avoid overheating.
    # The default is for the compiler to use some internal limits on how much
    # AVX-512 instructions are used. This is relevant on ATS-1 systems only
    # for KNL processors.
    #--------------------------------------------------------------------------#

    if [ x$VCPU = xknl ]; then
        FLAGS_C_COMPILER+=" -qopt-zmm-usage=high"
    fi
fi

#------------------------------------------------------------------------------#
# Configure options for the GNU compilers.
#------------------------------------------------------------------------------#

if [ "$VCOM" = "GNU" ]
then
    #--------------------------------------------------------------------------#
    # Use "-g" to provide debug symbols in the executable.  In general, use of
    # "-g" with modern compilers does not degrade performance and provides
    # information required by many tools such as debugging and performance
    # analysis tools.
    #
    # Use of "-O2" provides fairly aggressive optimization. When using vector
    # intrinsics versions, most of the optimization is explicit in the
    # intrinsics implementations. Reasonable alternatives to "-O2" could be
    # "-O3" or "-Ofast". These alternatives should be benchmarked sometime.
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER="-g -O2"

    #--------------------------------------------------------------------------#
    # Use of "-ffast-math" causes compiler to relax various IEEE or ISO rules
    # and specifications for math functions which can result in faster code.
    #
    # Use of "-fno-unsafe-math-optimizations" turns off some unsafe math
    # optimizations that got turned on by use of "-ffast-math" option. Some
    # comments in VPIC source code indicate need for this with older compilers.
    # This should be checked some time to see if it is still a relevant issue.
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER+=" -ffast-math"
    FLAGS_CXX_COMPILER+=" -fno-unsafe-math-optimizations"

    #--------------------------------------------------------------------------#
    # Use of "-fomit-frame-pointer" prevents keeping the frame pointer in a
    # register for functions that do not need one. This can make an extra
    # register available in many functions and reduce number of overall
    # instructions. Some profiling should be done to measure the benefit of
    # using this option.
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER+=" -fomit-frame-pointer"

    #--------------------------------------------------------------------------#
    # Use of "-fno-strict-aliasing" informs compiler that VPIC does not obey
    # ANSI aliasing rules which can reduce available optimizations.
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER+=" -fno-strict-aliasing"

    #--------------------------------------------------------------------------#
    # Use of "-Winline" cause compiler to emit a warning when a function that
    # is declared inline is not inlined. Inlining is very important to VPIC
    # performance and it is useful to know if compiler has not inlined a
    # function that was assumed to be inlined.
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER+=" -Winline"

    #--------------------------------------------------------------------------#
    # Use of "-rdynamic" removes the following type of VPIC warnings.
    #
    # Unable to find a safely writable symbol that corresponds to address
    # 432af0 (the closest match was "(null)" from "./lpi_2d_F6_test.Linux").
    # Writing out the raw address instead and keeping my fingers crossed.
    #
    # From g++ man page: Pass the flag -export-dynamic to the ELF linker, on
    # targets that support it. This instructs the linker to add all symbols,
    # not only used ones, to the dynamic symbol table. This option is needed
    # for some uses of "dlopen" or to allow obtaining backtraces from within
    # a program.
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER+=" -rdynamic"

    #--------------------------------------------------------------------------#
    # Use of "-dynamic" causes Cray compiler wrapper to direct compiler driver
    # to link dynamic libraries at runtime instead of static libraries. The
    # default on Cray systems is to link static libraries. It is important for
    # many tools, especially performance analysis tools, to have an executable
    # that has been linked dynamically to system libraries and MPI libraries.
    #--------------------------------------------------------------------------#

    if [ x$craype = x1 ]; then
        FLAGS_CXX_COMPILER+=" -dynamic"
    fi

    #--------------------------------------------------------------------------#
    # Use of "-march=knl" or "-march=haswell" causes g++ to generate code
    # specific to and optimized for the specific architecture of either KNL
    # or Haswell. It appears that the Cray wrappers already do this correctly
    # for KNL but it seems they may not for Haswell.
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER+=" -march=${VCPU}"

    #--------------------------------------------------------------------------#
    # Use "-g" to provide debug symbols in the executable.  In general, use of
    # "-g" with modern compilers does not degrade performance and provides
    # information required by many tools such as debugging and performance
    # analysis tools.
    #
    # Use of "-O2" provides fairly aggressive optimization. When using vector
    # intrinsics versions, most of the optimization is explicit in the
    # intrinsics implementations. Reasonable alternatives to "-O2" could be
    # "-O3" or "-Ofast". These alternatives should be benchmarked sometime.
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER="-g -O2"

    #--------------------------------------------------------------------------#
    # Use of "-ffast-math" causes compiler to relax various IEEE or ISO rules
    # and specifications for math functions which can result in faster code.
    #
    # Use of "-fno-unsafe-math-optimizations" turns off some unsafe math
    # optimizations that got turned on by use of "-ffast-math" option. Some
    # comments in VPIC source code indicate need for this with older compilers.
    # This should be checked some time to see if it is still a relevant issue.
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER+=" -ffast-math"
    FLAGS_C_COMPILER+=" -fno-unsafe-math-optimizations"

    #--------------------------------------------------------------------------#
    # Use of "-fomit-frame-pointer" prevents keeping the frame pointer in a
    # register for functions that do not need one. This can make an extra
    # register available in many functions and reduce number of overall
    # instructions. Some profiling should be done to measure the benefit of
    # using this option.
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER+=" -fomit-frame-pointer"

    #--------------------------------------------------------------------------#
    # Use of "-fno-strict-aliasing" informs compiler that VPIC does not obey
    # ANSI aliasing rules which can reduce available optimizations.
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER+=" -fno-strict-aliasing"

    #--------------------------------------------------------------------------#
    # Use of "-Winline" cause compiler to emit a warning when a function that
    # is declared inline is not inlined. Inlining is very important to VPIC
    # performance and it is useful to know if compiler has not inlined a
    # function that was assumed to be inlined.
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER+=" -Winline"

    #--------------------------------------------------------------------------#
    # Use of "-rdynamic" removes the following type of VPIC warnings.
    #
    # Unable to find a safely writable symbol that corresponds to address
    # 432af0 (the closest match was "(null)" from "./lpi_2d_F6_test.Linux").
    # Writing out the raw address instead and keeping my fingers crossed.
    #
    # From gcc man page: Pass the flag -export-dynamic to the ELF linker, on
    # targets that support it. This instructs the linker to add all symbols,
    # not only used ones, to the dynamic symbol table. This option is needed
    # for some uses of "dlopen" or to allow obtaining backtraces from within
    # a program.
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER+=" -rdynamic"

    #--------------------------------------------------------------------------#
    # Use of "-dynamic" causes Cray compiler wrapper to direct compiler driver
    # to link dynamic libraries at runtime instead of static libraries. The
    # default on Cray systems is to link static libraries. It is important for
    # many tools, especially performance analysis tools, to have an executable
    # that has been linked dynamically to system libraries and MPI libraries.
    #--------------------------------------------------------------------------#

    if [ x$craype = x1 ]; then
        FLAGS_C_COMPILER+=" -dynamic"
    fi

    #--------------------------------------------------------------------------#
    # Use of "-march=knl" or "-march=haswell" causes gcc to generate code
    # specific to and optimized for the specific architecture of either KNL
    # or Haswell. It appears that the Cray wrappers already do this correctly
    # for KNL but it seems they may not for Haswell.
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER+=" -march=${VCPU}"
fi

#------------------------------------------------------------------------------#
# Configure options for the Cray compilers.
#------------------------------------------------------------------------------#

if [ "$VCOM" = "CCE" ]
then
    #--------------------------------------------------------------------------#
    #
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER="-g -O2"
    #FLAGS_CXX_COMPILER+=" -hlist=ad"
    #FLAGS_CXX_COMPILER+=" -hipa5"
    FLAGS_CXX_COMPILER+=" -Wl,--export-dynamic"
    #FLAGS_CXX_COMPILER+=" -rdynamic"
    FLAGS_CXX_COMPILER+=" -dynamic"

    #--------------------------------------------------------------------------#
    #
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER="-g -O2"
    #FLAGS_C_COMPILER+=" -hlist=ad"
    #FLAGS_C_COMPILER+=" -hipa5"
    FLAGS_C_COMPILER+=" -Wl,--export-dynamic"
    #FLAGS_C_COMPILER+=" -rdynamic"
    FLAGS_C_COMPILER+=" -dynamic"
fi

#------------------------------------------------------------------------------#
# Configure options for the PGI compilers.
#------------------------------------------------------------------------------#

if [ "$VCOM" = "PGI" ]
then
    #--------------------------------------------------------------------------#
    #
    #--------------------------------------------------------------------------#

    FLAGS_CXX_COMPILER="-g -O2"
    FLAGS_CXX_COMPILER+=" -Wl,--export-dynamic"

    #--------------------------------------------------------------------------#
    #
    #--------------------------------------------------------------------------#

    FLAGS_C_COMPILER="-g -O2"
    FLAGS_C_COMPILER+=" -Wl,--export-dynamic"
fi

#------------------------------------------------------------------------------#
# This ends user configuration section.
#
# No changes required below unless VPIC build system has been extended or the
# module system on ATS-1 machines has changed in some fundamental way.
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
# Configure thread model.
#------------------------------------------------------------------------------#

if [ "$VTHR" = "PTH" ]
then
    SET_OPENMP="OFF"
    SET_PTHREADS="ON"
fi

if [ "$VTHR" = "OMP" ]
then
    SET_OPENMP="ON"
    SET_PTHREADS="OFF"
fi

#------------------------------------------------------------------------------#
# Configure particle sort method.
#------------------------------------------------------------------------------#

if [ "$VSORT" = "LSORT" ]
then
    SET_LEGACY_SORT="ON"
fi

module list

#------------------------------------------------------------------------------#
# create a new cache for cmake and load it
#------------------------------------------------------------------------------#
create_cmake_cache
set_cache_string CMAKE_BUILD_TYPE         $SET_BUILD_TYPE
set_cache_bool   ENABLE_INTEGRATED_TESTS  $SET_INTEGRATED_TESTS
set_cache_bool   ENABLE_UNIT_TESTS        $SET_UNIT_TESTS
set_cache_bool   ENABLE_OPENSSL           $SET_ENABLE_OPENSSL
set_cache_bool   DISABLE_DYNAMIC_RESIZING $SET_DISABLE_DYNAMIC_RESIZING
set_cache_string SET_MIN_NUM_PARTICLES    $SET_PARTICLE_MIN_NUM
set_cache_bool   USE_LEGACY_SORT          $SET_LEGACY_SORT
set_cache_bool   USE_V4_PORTABLE          $SET_V4_PORTABLE
set_cache_bool   USE_V4_SSE               $SET_V4_SSE
set_cache_bool   USE_V4_AVX               $SET_V4_AVX
set_cache_bool   USE_V4_AVX2              $SET_V4_AVX2
set_cache_bool   USE_V8_PORTABLE          $SET_V8_PORTABLE
set_cache_bool   USE_V8_AVX               $SET_V8_AVX
set_cache_bool   USE_V8_AVX2              $SET_V8_AVX2
set_cache_bool   USE_V16_PORTABLE         $SET_V16_PORTABLE
set_cache_bool   USE_V16_AVX512           $SET_V16_AVX512
set_cache_bool   VPIC_PRINT_MORE_DIGITS   $SET_MORE_DIGITS
set_cache_bool   USE_OPENMP               $SET_OPENMP
set_cache_bool   USE_PTHREADS             $SET_PTHREADS
set_cache_bool   BUILD_SHARED_LIBS        $SET_SHARED_LIBS
set_cache_string CMAKE_C_COMPILER         $VPIC_COMPILER_C
set_cache_string CMAKE_CXX_COMPILER       $VPIC_COMPILER_CXX
set_cache_string CMAKE_C_FLAGS            "$FLAGS_C_COMPILER"
set_cache_string CMAKE_CXX_FLAGS          "$FLAGS_CXX_COMPILER"

# allow user to 'lanl-current-mods initcache' to skip running cmake.
if [ x$1 = xinitcache ]; then
    echo ${init_cache} created.
    echo Now you can run \"cmake -C ${init_cache} src_dir\" to configure.
    exit 0
fi

#------------------------------------------------------------------------------#
# Call cmake command.
#------------------------------------------------------------------------------#
# Notes:
#
# Use of the "-LAH" command line option to cmake causes cmake to output the
# values of all of its variables. This is useful information when debugging
# a failed build.
#
# Note that all of the possible VPIC cmake variables relevant to an ATS-1
# system are set on the command line so that they can all be conditionally
# configured above through user selections.
#------------------------------------------------------------------------------#

cmake -LAH -C ${init_cache} ${src_dir}

if [ $? = 0 ]; then
    echo Now you can run \"make\" to build VPIC.
fi

#------------------------------------------------------------------------------#
# Done.
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
# vim: syntax=sh
#------------------------------------------------------------------------------#
